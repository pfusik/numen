	icl	'../nex.asx'

* Modules:
* TEST	Test
* DL	Display List
* SCR	Screen
* TEX	Texture
* ROTM	Rotation Matrix
* PERS	Perspective
* CAPO	Calculate Points
* INTP	Interpolation
* FILL	Fill
* LINE	Line
* DRAW	Draw

CLIP	equ	1

*** Test
TEST_bars equ	0
TEST_stop equ	0
TEST_see equ	0
TEST_lim equ	0	79
TEST_ncls equ	0

*** Constants
SCR_lines equ	56	; number of screen lines
SCR_DY	equ	3
ROTM_sa	equ	7200	; sine amplitude
PERS_c	equ	32	; perspective coeff.
PERS_d	equ	70	; ------- " -------
PERS_qq	equ	$100
FILL_mb	equ	26	; max no. of bytes in a span

*** Memory
; so many banks, bcoz we give whole $0000-$3fff to the tunnel
BANK_1	equ	2
BANK_2	equ	3
BANK_3	equ	4
BANK_4	equ	5

** SCR
zscr	equ	$3600
SCR_scr	equ	$d808	$1300

** TEX
TEX	equ	$8000	$4000*3/4	; texture: on each page: $40 hi bytes, $40 lo bytes, $40 hi bytes
TEX_pak	equ	$e000			; (init only)

** ROTM
; BANK_4
ROTM_sin equ	$4000	$800		; sine
ROTM_ks	equ	$ce80	22

** CAPO
; BANK_4
CAPO_ml	equ	$4800			; CAPO_tab pointers lo
CAPO_mh	equ	$4900			; ------- " ------- hi
; BANK_2
CAPO_tab equ	$4000			; multiplication table
CAPO_l	equ	$ca00			; (init only)
CAPO_h	equ	$cb00			; (init only)
CAPO_a	equ	$ca00			; original vertex X
CAPO_b	equ	$cb00			; original vertex Y
CAPO_c	equ	$cc00			; original vertex Z
CAPO_d	equ	$cd00			; original vertex NX
CAPO_e	equ	$ce00			; original vertex NY
CAPO_f	equ	$cf00			; original vertex NZ
CAPO_x	equ	$ca80			; vertex X screen coord.
CAPO_y	equ	$cb80			; vertex Y screen coord.
CAPO_u	equ	$cc80			; vertex U texture coord.
CAPO_v	equ	$cd80			; vertex V texture coord.

** PERS
PERS_tab equ	$80c0	$4000*1/4	; perspective table

* INTP
INTP_ch	equ	$cf80	$40
INTP_b6	equ	$c000	$700
INTP_b5	equ	INTP_b6+$100
INTP_b4	equ	INTP_b6+$200
INTP_b3	equ	INTP_b6+$300
INTP_b2	equ	INTP_b6+$400
INTP_b1	equ	INTP_b6+$500
INTP_b0	equ	INTP_b6+$600
; BANK_3
INTP_c0	equ	$4000	$700
INTP_c1	equ	INTP_c0+$100
INTP_c2	equ	INTP_c0+$200
INTP_c3	equ	INTP_c0+$300
INTP_c4	equ	INTP_c0+$400
INTP_c5	equ	INTP_c0+$500
INTP_c6	equ	INTP_c0+$600
INTP_it	equ	$4c00	$3400*1/2	; (int) (-$40..$3f / $01..$33)
INTP_ft	equ	$4c80			; (fract) (-$40..$3f / $01..$33)

** FILL
FILL_lx	equ	$ec40	$40
FILL_lu	equ	$ec80	$40
FILL_lv	equ	$ecc0	$40
FILL_pu	equ	$c700	$198
FILL_vu	equ	$c800	-$68
FILL_pv	equ	$7e00	$198	; BANK_3 ups...
FILL_vv	equ	$ce00	-$68
FILL_rx	equ	$ed40	$40
FILL_ru	equ	$ed80	$40
FILL_rv	equ	$edc0	$40
; BANK_1
FILL_pr	equ	$4000	$3900*$2a7/$300
FILL_hh	equ	$7900	3*SCR_lines
FILL_sl	equ	$7d00	$78
FILL_fl	equ	$7a00	-$68
FILL_fh	equ	$7b00	-$68
FILL_yv	equ	$7c00	-$68
FILL_sb	equ	$7d00	-$68
FILL_ih	equ	$7e00	-$68
FILL_ch	equ	$7f00	-$68

** LINE
; BANK_3
LINE_lp	equ	$4800	$1d0
LINE_rp	equ	$4a00	$1d0
LINE_pl	equ	$4740	$40
LINE_lh	equ	$4780	$40
LINE_rh	equ	$47c0	$40

*** Variables

** OBJ
OBJ_bak	equ	$3c
OBJ_cnt	equ	$3d
OBJ_ptr	equ	$3e

** Temporary
si	equ	$40
di	equ	$42
bx	equ	$44
t1	equ	$46
t2	equ	$48

** ROTM
ROTM_kv	equ	$4a	22
ROTM_ka	equ	$61
ROTM_kb	equ	ROTM_ka+1
ROTM_kc	equ	ROTM_ka+2
ROTM_va	equ	$64
ROTM_vb	equ	ROTM_va+1
ROTM_vc	equ	ROTM_va+2

** CAPO
CAPO_zv	equ	$67

** INTP
INTP_iz	equ	$68
INTP_iz2 equ	$69
INTP_fz	equ	$6a
INTP_iv	equ	$6c			; (init only)
INTP_fv	equ	$6e			; (init only)

** FILL
FILL_dy	equ	$6b
FILL_cy	equ	$6c
FILL_sz	equ	$6d
FILL_ip	equ	$70
FILL_fp	equ	$72
FILL_cp	equ	$74
FILL_tv	equ	$80	$2a

** LINE
LINE_p0	equ	$76
LINE_p1	equ	$77
LINE_p2	equ	$78

	org	$3fb0
	ift	NUMEN
zdl	dta	$f0,$6f,a(zscr),$8f
:27	dta	$2f,$8f
	dta	$41,a(zdl)
	eif

dli	sta	^4a
	mva	#13	^45
	mva	#3	^45
	pla:rti

	org	TEX_pak
	ins	'qlka1.gfx'
;	ins	'u.gfx'
;	ins	'phong.gfx'

	org	$ca00
** ROTM
ROTM_sl	dta	l(sin(0,ROTM_sa,512,0,128))
ROTM_sh	dta	h(sin(0,ROTM_sa,512,0,128))

** TEX
TEX_init
	ldx	>TEX
texi1	stx	texs1+2
	stx	texs2+2
	stx	texs3+2
	stx	texs4+2
	stx	texs5+2
	stx	texs6+2
	ldx	#$1f
	ldy	#$3f
texi2	lda	TEX_pak,x
	and	#$0f
texs1	sta	TEX+$40,y
:4	asl	@
texs2	sta	TEX,y
texs3	sta	TEX+$80,y-
texi3	lda	TEX_pak,x
	and	#$f0
texs4	sta	TEX,y
texs5	sta	TEX+$80,y
:4	lsr	@
texs6	sta	TEX+$40,y-
	dex
	bpl	texi2
	lda	#$20
	adc:sta	texi2+1	-
	sta	texi3+1
	bcc	texi4
	inc	texi2+2
	inc	texi3+2
texi4	ldx	texs1+2
	inx:cpx	>TEX+$4000
	bcc	texi1
	rts	

hi2	equ	$0200
lo2	equ	$0300
pro2	equ	$7200

zhp	equ	$7c	2
zlp	equ	$7e	2
zi	equ	$82	2

	ift	NUMEN
; zepsuj kod
zcod
	lda:rne	^4b
	mwa	#zdl	^42
	mwa	#dli	Dli_vector
	mwa	#-30	Vbl_clock
	jsr	Idle
	ldx	#0
asltex	lda	hi2,x
;	eor	#$d
	sub	#$1d
	asl	@
	sta	hi2,x
	lda	lo2,x
	eor	#$d
	sub	#1
	asl	@
	sta	lo2,x
	inx
	bne	asltex
; walk the unrolled tunnel code and replace different pointers
; for different angles with same pointers for whole screen
	mwa	#hi2	zhp
	mwa	#lo2	zlp
	lda	Banks_forEffect
	jsr	zcod_scr
	lda	Banks_forEffect+1
	jsr	zcod_scr
	ldy	>pro2
	bne	zcod_next	!

zcod_scr
	sta	^31
	ldy	>$4000
zcod_next
	mva	#0	zi
	sty	zi+1
zcod_byte
	ldy	#4
	mva	#zhp	(zi),y+
	lda	(zi),y
	cmp	#{ldy a:,x}
	ldy	#9
	bcs	zcod_noSwitch
	lda	#{cmp ^45}
	ldy	#5
	sta	(zi),y
	ldy	#10
	sta	(zi),y
	ldy	#9+8
zcod_noSwitch
	mva	#zlp	(zi),y
	lda	#12	+
	scs
	lda	#13+8	-
	adc:sta	zi
	scc:inc	zi+1
;	lda	#{rts}
;	cmp	(zi),0
;	bne	zcod_byte
	lda	(zi),0
	bmi	zcod_byte
	rts
	eif

	org	$e870
** PERS
PERS_zt	dta	b($100*PERS_c/[PERS_d-32],$100*PERS_c/[PERS_d-31])
	dta	b($100*PERS_c/[PERS_d-30],$100*PERS_c/[PERS_d-29])
	dta	b($100*PERS_c/[PERS_d-28],$100*PERS_c/[PERS_d-27])
	dta	b($100*PERS_c/[PERS_d-26],$100*PERS_c/[PERS_d-25])
	dta	b($100*PERS_c/[PERS_d-24],$100*PERS_c/[PERS_d-23])
	dta	b($100*PERS_c/[PERS_d-22],$100*PERS_c/[PERS_d-21])
	dta	b($100*PERS_c/[PERS_d-20],$100*PERS_c/[PERS_d-19])
	dta	b($100*PERS_c/[PERS_d-18],$100*PERS_c/[PERS_d-17])
	dta	b($100*PERS_c/[PERS_d-16],$100*PERS_c/[PERS_d-15])
	dta	b($100*PERS_c/[PERS_d-14],$100*PERS_c/[PERS_d-13])
	dta	b($100*PERS_c/[PERS_d-12],$100*PERS_c/[PERS_d-11])
	dta	b($100*PERS_c/[PERS_d-10],$100*PERS_c/[PERS_d-9])
	dta	b($100*PERS_c/[PERS_d-8],$100*PERS_c/[PERS_d-7])
	dta	b($100*PERS_c/[PERS_d-6],$100*PERS_c/[PERS_d-5])
	dta	b($100*PERS_c/[PERS_d-4],$100*PERS_c/[PERS_d-3])
	dta	b($100*PERS_c/[PERS_d-2],$100*PERS_c/[PERS_d-1])
	dta	b($100*PERS_c/[PERS_d],$100*PERS_c/[PERS_d+1])
	dta	b($100*PERS_c/[PERS_d+2],$100*PERS_c/[PERS_d+3])
	dta	b($100*PERS_c/[PERS_d+4],$100*PERS_c/[PERS_d+5])
	dta	b($100*PERS_c/[PERS_d+6],$100*PERS_c/[PERS_d+7])
	dta	b($100*PERS_c/[PERS_d+8],$100*PERS_c/[PERS_d+9])
	dta	b($100*PERS_c/[PERS_d+10],$100*PERS_c/[PERS_d+11])
	dta	b($100*PERS_c/[PERS_d+12],$100*PERS_c/[PERS_d+13])
	dta	b($100*PERS_c/[PERS_d+14],$100*PERS_c/[PERS_d+15])
	dta	b($100*PERS_c/[PERS_d+16],$100*PERS_c/[PERS_d+17])
	dta	b($100*PERS_c/[PERS_d+18],$100*PERS_c/[PERS_d+19])
	dta	b($100*PERS_c/[PERS_d+20],$100*PERS_c/[PERS_d+21])
	dta	b($100*PERS_c/[PERS_d+22],$100*PERS_c/[PERS_d+23])
	dta	b($100*PERS_c/[PERS_d+24],$100*PERS_c/[PERS_d+25])
	dta	b($100*PERS_c/[PERS_d+26],$100*PERS_c/[PERS_d+27])
	dta	b($100*PERS_c/[PERS_d+28],$100*PERS_c/[PERS_d+29])
	dta	b($100*PERS_c/[PERS_d+30],$100*PERS_c/[PERS_d+31])

* INTP
INTP_dl	dta	l($10000/2,$10000/3,$10000/4,$10000/5)
	dta	l($10000/6,$10000/7,$10000/8,$10000/9)
	dta	l($10000/10,$10000/11,$10000/12,$10000/13)
	dta	l($10000/14,$10000/15,$10000/16,$10000/17)
	dta	l($10000/18,$10000/19,$10000/20,$10000/21)
	dta	l($10000/22,$10000/23,$10000/24,$10000/25)
	dta	l($10000/26,$10000/27,$10000/28,$10000/29)
	dta	l($10000/30,$10000/31,$10000/32,$10000/33)
	dta	l($10000/34,$10000/35,$10000/36,$10000/37)
	dta	l($10000/38,$10000/39,$10000/40,$10000/41)
	dta	l($10000/42,$10000/43,$10000/44,$10000/45)
	dta	l($10000/46,$10000/47,$10000/48,$10000/49)
	dta	l($10000/50,$10000/51,$10000/52)
INTP_dh	dta	h($10000/2,$10000/3,$10000/4,$10000/5)
	dta	h($10000/6,$10000/7,$10000/8,$10000/9)
	dta	h($10000/10,$10000/11,$10000/12,$10000/13)
	dta	h($10000/14,$10000/15,$10000/16,$10000/17)
	dta	h($10000/18,$10000/19,$10000/20,$10000/21)
	dta	h($10000/22,$10000/23,$10000/24,$10000/25)
	dta	h($10000/26,$10000/27,$10000/28,$10000/29)
	dta	h($10000/30,$10000/31,$10000/32,$10000/33)
	dta	h($10000/34,$10000/35,$10000/36,$10000/37)
	dta	h($10000/38,$10000/39,$10000/40,$10000/41)
	dta	h($10000/42,$10000/43,$10000/44,$10000/45)
	dta	h($10000/46,$10000/47,$10000/48,$10000/49)
	dta	h($10000/50,$10000/51,$10000/52)

** FILL
fivta	dta	l($feeb,$fd00,$fd96,$fe32)
	dta	h($feeb,$fd00,$fd96,$fe32)
fivtd	dta	7,6,6,7

* ROTM
ROTM_set
	ldx	#0
	lda	ROTM_kb
	add	ROTM_kc
	tay
	lda	ROTM_vb
	add	ROTM_vc
	jsr	pang
	lda	ROTM_kc
	sub	ROTM_kb
	tay
	lda	ROTM_vc
	sub	ROTM_vb
	jsr	pang
	lda	#0
	sub	ROTM_kb
	tay
	lda	#0
	sub	ROTM_vb
	jsr	pang
	lda	ROTM_ka
	add	ROTM_kb
	add	ROTM_kc
	tay
	lda	ROTM_va
	add	ROTM_vb
	add	ROTM_vc
	jsr	pang
	lda	ROTM_ka
	add	ROTM_kb
	sub	ROTM_kc
	tay
	lda	ROTM_va
	add	ROTM_vb
	sub	ROTM_vc
	jsr	pang
	lda	ROTM_ka
	sub	ROTM_kb
	add	ROTM_kc
	tay
	lda	ROTM_va
	sub	ROTM_vb
	add	ROTM_vc
	jsr	pang
	lda	ROTM_ka
	sub	ROTM_kb
	sub	ROTM_kc
	tay
	lda	ROTM_va
	sub	ROTM_vb
	sub	ROTM_vc
	jsr	pang
	lda	#0
	sub	ROTM_ka
	sub	ROTM_kc
	tay
	lda	#0
	sub	ROTM_va
	sub	ROTM_vc
	jsr	pang
	lda	ROTM_ka
	sub	ROTM_kc
	tay
	lda	ROTM_va
	sub	ROTM_vc
	jsr	pang
	lda	ROTM_ka
	add	ROTM_kb
	tay
	lda	ROTM_va
	add	ROTM_vb
	jsr	pang
	lda	ROTM_ka
	sub	ROTM_kb
	tay
	lda	ROTM_va
	sub	ROTM_vb
; pang

pang	asl	@
	rol	t1
	asl	@
	rol	t1
	sta	ROTM_ks,x
	lda	t1
	and	#3
	cmp	#2
	scc:eor	#4
	sta	ROTM_ks+1,x
	tya
	asl	@
	rol	t1
	asl	@
	rol	t1
	asl	@
	rol	t1
	sta	ROTM_kv,x+
	lda	t1
	and	#7
	eor	>ROTM_sin
	sta	ROTM_kv,x+
	rts

ROTM_init
	mva	Banks_forEffect+BANK_4	^31
	ldx	#0
	ldy	#0
	lda	>ROTM_sin
	sty	di
	sta	di+1
	jsr	*+3
	jsr	psinco
	inx
	bpl	*-4
	jsr	psinco
	dex
	bne	*-4
	rts

psinco	lda	di+1
	jsr	putsin
	lda	di+1
	add	#2
putsin	and	#7
	cmp	#4
	bcs	psineg
	mva	ROTM_sl,x	(di),y
	lda	ROTM_sh,x
	bcc	psinst	!
psineg	lda	#0
	sbc	ROTM_sl,x	+
	sta	(di),y
	lda	#0
	sbc	ROTM_sh,x
psinst	iny
	sta	(di),y+
	sne:inc	di+1
	txa
	eor	#$7f
	tax
	inx
	rts

* CAPO
CAPO_init
	ldy	#$3f
	clc
capi0	mva	#0	CAPO_l,y
	tya
:2	asl	@
	eor	#$ff
	adc	#1	-
	sta	CAPO_h,y-
	bpl	capi0
	mwa	#CAPO_tab	di
	ldx	#$80
capi1	mva	Banks_forEffect+BANK_2	^31
	ldy	#$3f
capi2	tya
:3	asl	@
	add:sta	CAPO_l,y
	mva	CAPO_h,y	(di),y
	adc	#$ff
	cpy	#$20
	adc	#0
	sta	CAPO_h,y-
	bpl	capi2
	mva	Banks_forEffect+BANK_4	^31
	mva	di	CAPO_ml,x
	add	#$40
	sta	di
	mva	di+1	CAPO_mh,x
	adc	#0
	sta	di+1
	inx:cpx	#$80
	bne	capi1

	mva	<PERS_tab	CAPO_zv
	rts

** PERS
PERS_init
	ldx	#$3f
persi1	stx	t2
	txa
	add	>PERS_tab
	sta	persi2+2
	sta	persi3+2
	lda	PERS_zt,x
	asl	@
	sta	bx
	lda	#$80
	rol	@
	sta	bx+1
	lda	<PERS_qq
	sbc	bx	+
	sta	t1
	lda	>PERS_qq
	sbc	bx+1
	asl	t1
	rol	@
	asl	t1
	rol	@
	asl	t1
	rol	@
	asl	t1
	rol	@
	asl	t1
	rol	@
	ldx	t1
	ldy	#0
persi2	sta	PERS_tab,y
	txa
	add	bx
	tax
persi3	lda	PERS_tab,y
	adc	bx+1
	iny:cpy	#64
	bcc	persi2
	ldx	t2
	dex
	bpl	persi1
	rts

** INTP
INTP_init
	mva	Banks_forEffect+BANK_3	^31
	mva	<INTP_it	INTP_iv
	mva	<INTP_ft	INTP_fv
	ldx	#2*FILL_mb-1
intp1	txa
	add	>INTP_it
	sta	INTP_iv+1
	sta	INTP_fv+1
	ldy	#-$40
	mva	INTP_dl-1,x	INTP_fz
	sta	INTP_iz2
	mva	INTP_dh-1,x	INTP_iz
	lsr	@
	ror	INTP_iz2
	lsr	@
	ror	INTP_iz2
	pha
	lda	#0
	sub	INTP_iz2
	sta	(INTP_fv),y
	pla
	eor	#$ff
	adc	#0
	sta	(INTP_iv),y
	mva	#0	INTP_iz2
intp2
	lda	INTP_fz
	add:sta	INTP_iz2
	lda	(INTP_fv),y+
	adc	INTP_iz
	sta	(INTP_fv),y-
	lda	(INTP_iv),y+
	adc	#0
	sta	(INTP_iv),y
	cpy	#$40
	bne	intp2	

	dex
	bne	intp1

	ldy	#-$40
intp0	tya:sta	INTP_it,y
	mva	#0	INTP_ft,y
	iny
	cpy	#$40
	bne	intp0

	ldx	#0
intib
	stx	INTP_fz

	mva	#0	INTP_iz2
	ldy	>INTP_c0
	clc
initc1	sty	initc3+2
	mva	#1	INTP_iz
	lda	INTP_iz2
initc2	adc	INTP_fz
	rol	INTP_iz
	bcc	initc2
	sta	INTP_iz2
	lda	INTP_iz
initc3	sta	INTP_c0,x
	iny
	cpy	>INTP_c0+$700
	bcc	initc1

	txa
	and	#1
	add	#$ff
	sta	INTP_b0,x
	txa
	lsr	@
	and	#1
	add	#$ff
	sta	INTP_b1,x
	txa
:2	lsr	@
	and	#1
	add	#$ff
	sta	INTP_b2,x
	txa
:3	lsr	@
	and	#1
	add	#$ff
	sta	INTP_b3,x
	txa
:4	lsr	@
	and	#1
	add	#$ff
	sta	INTP_b4,x
	txa
:5	lsr	@
	and	#1
	add	#$ff
	sta	INTP_b5,x
	txa
:6	lsr	@
	and	#1
	add	#$ff
	sta	INTP_b6,x
	inx
	bne	intib

	ldx	#FILL_mb*2-1
inich1	txa
:3	lsr	@
	add	>INTP_c0
	sta	INTP_ch,x
	dex
	bpl	inich1

	rts

** FILL
FILL_init
	mva	Banks_forEffect+BANK_1	^31
	sta	FILL_loadBank0+1
	sta	DRAW_loadBank0+1
	mva	Banks_forEffect+BANK_3	FILL_loadBank2+1
	sta	DRAW_loadBank2+1
* pr
	ldx	#0
fipr2	txa
	sta	t1+1
	asl	@
	adc	t1+1	-
	adc	>FILL_pr	-
	sta	di+1
	adc	>12*FILL_mb-6	-
	sta	bx+1
	mva	<FILL_pr	di
	mva	<FILL_pr+12*FILL_mb-6	bx
	txa
	adc	>SCR_scr	-
	sta	t1
	lda	#{bpl}
	ldx	#FILL_tv
	jsr	finp1
	mva	#{jmp FILL_r3}	(bx),0+
	mva	<FILL_r3	(bx),y+
	mva	>FILL_r3	(bx),y
	lda	#3
	add:sta	bx
	scc:inc	bx+1
	lda	#{bne}
	ldx	#FILL_tv-2
	jsr	finp1
	mva	#{lda #$f0}	(bx),0+
	mva	#$f0	(bx),y+
	mva	#{and SCR_scr,x}	(bx),y+
	mva	#0	(bx),y+
	mva	t1	(bx),y+
	mva	#{eor (FILL_tv),y}	(bx),y+
	mva	#FILL_tv	(bx),y+
	mva	#{sta SCR_scr,x}	(bx),y+
	mva	#0	(bx),y+
	mva	t1	(bx),y+
	mva	#{jmp FILL_r3}	(bx),y+
	mva	<FILL_r3	(bx),y+
	mva	>FILL_r3	(bx),y
	ldx	t1+1
	inx
	cpx	#19
	jcc	fipr2
* pu,pv
	mva	Banks_forEffect+BANK_3	^31
	mwa	#FILL_pu	di
	mwa	#FILL_pv	bx
	ldx	#2*FILL_mb-1
fipu1
	txa
	eor	#$ff
	asl	@
	tay
	mva	di	FILL_vu,y
	sta	FILL_vv,y
	mva	di+1	FILL_vu+1,y
	mva	bx+1	FILL_vv+1,y
	ldy	#0
	txa
	and	#7
	bne	fipu2
	mva	#{cpy #$80}	(di),y
	sta	(bx),y+
	lda	#$80
	bne	fipu3	!
fipu2	mva	#{cmp INTP_b0,y}	(di),y
	sta	(bx),y+
	mva	<INTP_b0	(di),y
	sta	(bx),y+
	txa
	and	#7
	add	>INTP_b6-$100
fipu3	sta	(di),y
	sta	(bx),y+
	mva	#{adc INTP_iz}	(di),y
	sta	(bx),y+
	txa:lsr	@
	mva	#INTP_iz	(bx),y
	scs:lda	#INTP_iz2
	sta	(di),y+
	mva	#{sta FILL_tv}	(di),y
	sta	(bx),y+
	txa
	asl	@
	adc	#FILL_tv	-
	sta	(di),y
	adc	#1	-
	sta	(bx),y
	txa
	beq	fipur
	and	#7
	bne	fipu4
	iny
	mva	#{ldy INTP_fz}	(di),y
	sta	(bx),y+
	mva	#INTP_fz	(di),y
	sta	(bx),y+
	mva	#{lda INTP_c0,y}	(di),y
	sta	(bx),y+
	mva	<INTP_c0	(di),y
	sta	(bx),y+
	txa
:3	lsr	@
	adc	>INTP_c0-$100
	sta	(di),y
	sta	(bx),y+
	mva	#{tay}	(di),y
	sta	(bx),y+
	mva	#{lda FILL_tv}	(di),y
	sta	(bx),y+
	txa
	asl	@
	adc	#FILL_tv	-
	sta	(di),y
	adc	#1	-
	sta	(bx),y
fipu4	tya:sec
	adc:sta	di
	sta	bx
	bcc	fipu5
	inc	di+1
	inc	bx+1
fipu5	dex
	jmp	fipu1
fipur	iny
	mva	#{jmp a:}	(di),y
	sta	(bx),y+
	mva	<FILL_r1	(di),y
	mva	<FILL_r2	(bx),y+
	mva	>FILL_r1	(di),y
	mva	>FILL_r2	(bx),y

* sl,hh
	mva	Banks_forEffect+BANK_1	^31
	ldx	#0
	lda	<SCR_scr+4
	ldy	>FILL_pr+$200
	clc
fisc1	sta	FILL_sl+SCR_DY,x
	eor	#128
	sta	FILL_sl+SCR_lines+SCR_DY,x
	tya
:!CLIP	sta	FILL_hh+SCR_DY,x
:CLIP	sta	FILL_hh+SCR_lines+SCR_DY,x
:CLIP	mva	#0	FILL_hh+SCR_DY,x
:CLIP	sta	FILL_hh+2*SCR_lines+SCR_DY,x
	lda	FILL_sl+SCR_DY,x
	adc	#40	-
	bpl	fisc2
	lda	<SCR_scr+4
:3	iny
fisc2	inx
	cpx	#SCR_lines
	bcc	fisc1
* fl,fh,yv,sb,ih,ch
	ldx	#7
	mva:rpl	fivta,x	FILL_tv,x-
	ldy	#-4*FILL_mb
	clc
fivt1	mva	#0	FILL_yv,y
	sta	FILL_yv+2,y
	sta	FILL_sb,y
	sta	FILL_sb+1,y
	mva	#$40	FILL_yv+1,y
	sta	FILL_yv+3,y
	mva	#$c0	FILL_sb+2,y
	sta	FILL_sb+3,y
	ldx	#3
fivt2	mva	FILL_tv,x	FILL_fl,y
	adc	fivtd,x	-
	sta	FILL_tv,x
	mva	FILL_tv+4,x	FILL_fh,y+
	adc	#0
	sta	FILL_tv+4,x
	dex:bpl	fivt2
	tya
	bne	fivt1

* ih,ch
	ldx	#0
	ldy	#-2
fiht1	txa
	add	>INTP_it
	sta	FILL_ih,y
	sta	FILL_ih+1,y
	txa
:3	lsr	@
	add	>INTP_c0
	sta	FILL_ch,y
	sta	FILL_ch+1,y
	inx
	dey
	dey
	cpx	#2*FILL_mb
	bcc	fiht1

* ip,fp,cp
	mva	<INTP_it	FILL_ip
	mva	<INTP_ft	FILL_fp
	mva	<INTP_c0	FILL_cp
	rts	; FILL_init

* LINE
LINE_init
	mva	Banks_forEffect+BANK_3	^31
	mwa	#LINE_lp	di
	mwa	#LINE_rp	bx
	ldx	#2*FILL_mb-1
lipu1	mva	di	LINE_pl+1,x
	mva	di+1	LINE_lh+1,x
	mva	bx+1	LINE_rh+1,x
	ldy	#0
	txa
	and	#7
	bne	lipu2
	mva	#{cpx #$80}	(di),y
	sta	(bx),y+
	lda	#$80
	bne	lipu3	!
lipu2	mva	#{cmp INTP_b0,x}	(di),y
	sta	(bx),y+
	mva	<INTP_b0	(di),y
	sta	(bx),y+
	txa
	and	#7
	add	>INTP_b6-$100
lipu3	sta	(di),y
	sta	(bx),y+
	mva	#{adc INTP_iz}	(di),y
	sta	(bx),y+
	mva	#INTP_iz	(di),y
	sta	(bx),y+
	mva	#{sta FILL_lx,y}	(di),y
	sta	(bx),y+
	txa
:<FILL_lx!=0	adc	<FILL_lx	-
	sta	(di),y
	sta	(bx),y+
	mva	>FILL_lx	(di),y
	mva	>FILL_rx	(bx),y
	txa
	beq	lipur
	and	#7
	bne	lipu4
	iny
	mva	#{ldx INTP_fz}	(di),y
	sta	(bx),y+
	mva	#INTP_fz	(di),y
	sta	(bx),y+
	mva	#{lda INTP_c0,x}	(di),y
	sta	(bx),y+
	mva	<INTP_c0	(di),y
	sta	(bx),y+
	txa
:3	lsr	@
	adc	>INTP_c0-$100
	sta	(di),y
	sta	(bx),y+
	mva	#{tax}	(di),y
	sta	(bx),y+
	mva	#{lda FILL_lx,y}	(di),y
	sta	(bx),y+
	txa
:<FILL_lx!=0	adc	<FILL_lx	-
	sta	(di),y
	sta	(bx),y+
	mva	>FILL_lx	(di),y
	mva	>FILL_rx	(bx),y
lipu4	tya:sec
	adc:sta	di
	sta	bx
	bcc	lipu5
	inc	di+1
	inc	bx+1
lipu5	dex
	jmp	lipu1
lipur	iny
	mva	#{rts}	(di),y
	sta	(bx),y
	mva	<plapla	LINE_pl
	mva	>plapla	LINE_lh
	sta	LINE_rh
	rts

main
	ift	!NUMEN
	lda:rne	^4b
	ldx	#29
	sta:rpl	^00,x-
	sta	^40
	eif
:NUMEN	jsr	zcod
	jsr	TEX_init
	jsr	ROTM_init
	jsr	CAPO_init
	jsr	PERS_init
	jsr	INTP_init
	jsr	FILL_init
	jsr	LINE_init
	jsr	OBJ_init

 	mva	#$53	ROTM_ka
	mva	#$12	ROTM_kb
	mva	#$ed	ROTM_kc
	ift	TEST_stop
 	mva	#0	ROTM_ka
	mva	#0	ROTM_kb
	mva	#0	ROTM_kc
	mva	#0	ROTM_va
	sta	ROTM_vb
	sta	ROTM_vc
	eli	0
	mva	#7	ROTM_va
	mva	#9	ROTM_vb
	mva	#11	ROTM_vc
	els
	mva	#12	ROTM_va
	mva	#15	ROTM_vb
	mva	#7	ROTM_vc
	eif
	jsr	ROTM_set

	ift	NUMEN||TEST_ncls
	ldy	#119
	jsr	COPY_tunnel
	eif
	ift	TEST_ncls
	ldy	#128+119
	jsr	COPY_tunnel
	eif
;	jsr	vbl

* Show
	lda:rne	^4b
	mva	#$22	^40
	mwa	#DL_1	^42
;	mva	#$40	^1b
;	sta	^1a

	ift	NUMEN
	mwa	#dli	Dli_vector
	mwa	#vbl	Vbl_vector
	mwa	#-1000	Vbl_clock
	jsr	Idle
	ift	CLIP
;	mva	#-6	CLIP_dyDelta
	mva	<FILL_hh+SCR_lines+6*9	CLIP_dyLimit
	mwa	#-80	Vbl_clock
	jsr	Idle
	eif
	mva	#{rts}	vbl
	lda:rne	^4b
	mwa	#rts	Vbl_vector
;	sta	^40
	mwa	#zdl	^42
;;	mwa	#zdli	Dli_vector
	jmp	NextBlock
	els
	mwa	#nmi	$fffa
	dec	^4e
	jmp	*
	eif

* Interrupt
	ift	!NUMEN
nmi	pha
	bit	^4f
	jmi	dli
	txa:pha
	tya:pha
	lda:pha	^31
	jsr	vbl
	pla:sta	^31
	pla:tay
	pla:tax
	pla
	rti
	eif

vbl
	mva	#{rts}	vbl
:TEST_bars mva	#8	^1a

;	mva	Banks_forEffect+BANK_1	^31
	lda	#<FILL_sl^<[FILL_sl+SCR_lines]
	eor:sta	FILL_db
	ert	>DL_1!=>DL_2
	ldx	<DL_1
	ldy	#128+119
	cmp	<FILL_sl
	bne	setscr
	ldx	<DL_2
	ldy	#119
setscr
	stx	^42
;	mvx	>DL_1	^43
	tya:pha
	lda	#$80
gtiamo	equ	*-1
	sta	^1b
	bpl	setcolba
	lsr	gtiamo
	spl
setcolba
	mva	OBJ_bak	^1a
	ift	NUMEN
an	equ	$e1

	dec	OBJ_cnt
	bne	sameobj
	ldx	OBJ_ptr
	ldy	OBJ_ptr+1
	jsr	OBJ_next
	ldx	#0
invtex	lda	#$f0
	eor:sta	hi2,x
	lda	#$0f
	eor:sta	lo2,x
	inx:bne	invtex

sameobj

	lda	#2 7 10
	add	an
	and	#$7f
	sta	an
	tax
	mva	Banks_forEffect	^31
	jsr	$4000
	mva	Banks_forEffect+1	^31
	jsr	pro2
	jsr	$4000
	eif
	pla:tay
:!TEST_ncls	jsr	COPY_moveTunnel

	ift	CLIP
	lda	CLIP_pos
	cmp	<FILL_hh+SCR_lines
CLIP_dyLimit	equ	*-1
	beq	CLIP_noMove
	add	#6
CLIP_dyDelta	equ	*-1
	sta	CLIP_pos
CLIP_noMove
	eif

	jsr	ROTM
	jsr	CAPO
	jsr	DRAW

:TEST_bars mva	#0	^1a
	mva	#{lda #}	vbl
	rts

** ROTM
* Compute unit vectors (5/7/97)
ROTM	mva	Banks_forEffect+BANK_4	^31
	lda	(ROTM_kv+4),0
	asl	@
	tax
	iny	#1
	lda	(ROTM_kv+4),y
	rol	@
	cpx	#$80
	rol	@
	tax
	mva	CAPO_ml,x	vaz
	mva	CAPO_mh,x	vaz+1

	dey	#0
	lda	(ROTM_kv),y
	add	(ROTM_kv+2),y
	tax
	iny	#1
	lda	(ROTM_kv),y
	adc	(ROTM_kv+2),y
	cpx	#$80
	rol	@
	tax
	mva	CAPO_ml,x	vay
	sta	vay2
	mva	CAPO_mh,x	vay+1
	sta	vay2+1

	iny	#2
	lda	(ROTM_kv),y
	add	(ROTM_kv+2),y
	tax
	iny	#3
	lda	(ROTM_kv),y
	adc	(ROTM_kv+2),y
	cpx	#$80
	rol	@
	tax
	mva	CAPO_ml,x	vax
	sta	vax2
	mva	CAPO_mh,x	vax+1
	sta	vax2+1

	lda	(ROTM_kv+18),0
	add	(ROTM_kv+20),y
	tax
	iny	#1
	lda	(ROTM_kv+18),y
	adc	(ROTM_kv+20),y
	cpx	#$80
	rol	@
	tax
	mva	CAPO_ml,x	vbz
	mva	CAPO_mh,x	vbz+1

	iny	#2
	lda	(ROTM_kv+18),y
	add	(ROTM_kv+20),y
	tax
	iny	#3
	lda	(ROTM_kv+18),y
	adc	(ROTM_kv+20),y
	cpx	#$80
	rol	@
	tax
	mva	CAPO_ml,x	vcz
	mva	CAPO_mh,x	vcz+1

	dey	#2
	lda	(ROTM_kv+16),y
	asl	@
	tax
	iny	#3
	lda	(ROTM_kv+16),y
	rol	@
	sta	t1+1
	txa
	add	(ROTM_kv+8),0
	php
	sub	(ROTM_kv+12),y
	sta	t1
	iny	#1
	lda	t1+1
	sbc	(ROTM_kv+12),y
	plp
	adc	(ROTM_kv+8),y
	sta	t1+1
	iny	#2
	lda	(ROTM_kv+14),y
	asl	@
	tax
	iny	#3
	lda	(ROTM_kv+14),y
	rol	@
	sta	t2+1
	txa
	add	(ROTM_kv+10),0
	php
	sub	(ROTM_kv+6),y
	sta	t2
	iny	#1
	lda	t2+1
	sbc	(ROTM_kv+6),y
	plp
	adc	(ROTM_kv+10),y
	sta	t2+1
	lda	t1
	add	t2
	lda	t1+1
	adc	t2+1
	tax
	mva	CAPO_ml,x	vby
	sta	vby2
	mva	CAPO_mh,x	vby+1
	sta	vby2+1

	lda	t1
	sub	t2
	lda	t1+1
	sbc	t2+1
	tax
	mva	CAPO_ml,x	vcx
	sta	vcx2
	mva	CAPO_mh,x	vcx+1
	sta	vcx2+1

	dey	#0
	lda	(ROTM_kv+14),y
	asl	@
	tax
	iny	#1
	lda	(ROTM_kv+14),y
	rol	@
	sta	t1+1
	iny	#2
	txa
	add	(ROTM_kv+10),y
	php
	sub	(ROTM_kv+6),y
	sta	t1
	iny	#3
	lda	t1+1
	sbc	(ROTM_kv+6),y
	plp
	adc	(ROTM_kv+10),y
	sta	t1+1
	lda	(ROTM_kv+16),0
	asl	@
	tax
	iny	#1
	lda	(ROTM_kv+16),y
	rol	@
	sta	t2+1
	iny	#2
	txa
	add	(ROTM_kv+12),y
	php
	sub	(ROTM_kv+8),y
	sta	t2
	iny	#3
	lda	t2+1
	sbc	(ROTM_kv+8),y
	plp
	adc	(ROTM_kv+12),y
	sta	t2+1
	lda	t1
	add	t2
	lda	t1+1
	adc	t2+1
	tax
	mva	CAPO_ml,x	vbx
	sta	vbx2
	mva	CAPO_mh,x	vbx+1
	sta	vbx2+1

	lda	t1
	sub	t2
	lda	t1+1
	sbc	t2+1
	tax
	mva	CAPO_ml,x	vcy
	sta	vcy2
	mva	CAPO_mh,x	vcy+1
	sta	vcy2+1

	ldx	#20
	clc
addk	lda	ROTM_kv,x
	adc	ROTM_ks,x	-
	sta	ROTM_kv,x
	lda	ROTM_kv+1,x
	adc	ROTM_ks+1,x
	and	#7
	eor	>ROTM_sin
	sta	ROTM_kv+1,x
	dex
	dex
	bpl	addk
	rts

** CAPO
CAPO	mva	Banks_forEffect+BANK_2	^31
	ldx	#0
CAPO_n	equ	*-1
capo1	ldy	CAPO_c,x
	lda	CAPO_tab,y
vcz	equ	*-2
	ldy	CAPO_b,x
	add	CAPO_tab,y
vbz	equ	*-2
	ldy	CAPO_a,x
	add	CAPO_tab,y
vaz	equ	*-2
	lsr	@
	sec:ror	@
	sta	CAPO_zv+1

	lda	CAPO_tab,y
vax	equ	*-2
	ldy	CAPO_b,x
	add	CAPO_tab,y
vbx	equ	*-2
	ldy	CAPO_c,x
	add	CAPO_tab,y
vcx	equ	*-2
	lsr:lsr	@
	tay
	mva	(CAPO_zv),y	CAPO_x,x

	ldy	CAPO_a,x
	lda	CAPO_tab,y
vay	equ	*-2
	ldy	CAPO_b,x
	add	CAPO_tab,y
vby	equ	*-2
	ldy	CAPO_c,x
	add	CAPO_tab,y
vcy	equ	*-2
	lsr:lsr	@
	tay
	mva	(CAPO_zv),y	CAPO_y,x

	ldy	CAPO_d,x
	lda	CAPO_tab,y
vax2	equ	*-2
	ldy	CAPO_e,x
	add	CAPO_tab,y
vbx2	equ	*-2
	ldy	CAPO_f,x
	add	CAPO_tab,y
vcx2	equ	*-2
	lsr:lsr	@
	sta	CAPO_u,x

	ldy	CAPO_d,x
	lda	CAPO_tab,y
vay2	equ	*-2
	ldy	CAPO_e,x
	add	CAPO_tab,y
vby2	equ	*-2
	ldy	CAPO_f,x
	add	CAPO_tab,y
vcy2	equ	*-2
	lsr:lsr	@
	add	>TEX
	sta	CAPO_v,x

	dex:jne	capo1
	rts

* FILL

finp1	sta	fiprb
	stx	si
	ldx	#FILL_mb-1

fipr1	mva	#{and SCR_scr,x}	(di),0+
	txa:sta	(di),y+
	mva	t1	(di),y+
	mva	#{jmp 0}	(di),y+
	lda	bx
	add	#2
	sta	(di),y+
	lda	bx+1
	adc	#0
	sta	(di),y

	mva	#{lda (FILL_tv),y}	(bx),0+
	txa
:2	asl	@
	adc	si	-
	adc	#2
	sta	(bx),y+
	mva	#{eor (FILL_tv),y}	(bx),y+
	txa
:2	asl	@
	adc	si	-
	sta	(bx),y+
	mva	#{sta SCR_scr,x}	(bx),y+
	txa:sta	(bx),y+
	mva	t1	(bx),y+

	lda	#6
	add:sta	di
	scc:inc	di+1
	tya
	add:sta	bx
	scc:inc	bx+1
	dex
fiprb	bpl	fipr1
FILL_x	rts

FILL_r3	ldx	FILL_cy
FILL	dex
	cpx	#0
FILL_uy	equ	*-1
	bcc	FILL_x
	lda	FILL_lx,x
	sbc	FILL_rx,x	+
	bcs	FILL
	lsr	FILL_lx,x
	rol	@
	tay
	and	#$fe
	sta	FILL_j1+1
	sta	FILL_j2+1
	ift	CLIP
	lda	FILL_hh+SCR_lines-9*6,x
CLIP_pos	equ	*-2
	beq	FILL
	els
	lda	FILL_hh,x
	eif
	stx	FILL_cy
	adc	FILL_fh,y	+
	sta	FILL_j3+2
	mva	FILL_ih,y	FILL_ip+1

	sta	FILL_fp+1
	mva	FILL_ch,y	FILL_cp+1
	mva	FILL_fl,y	FILL_j3+1
	sty	FILL_ly+1
	mva	FILL_sb,y	FILL_sz

 	lda	FILL_lu,x
	sbc	FILL_ru,x	+
	tay
FILL_loadBank2	mva	#0	^31
	lda	(FILL_ip),y
	add	#$40
	sta	INTP_iz
	eor	#$80
	sta	INTP_iz2
	mva:tay	(FILL_fp),y	INTP_fz
	lda:tay	(FILL_cp),y
	lda	FILL_ru,x
	sub	FILL_sz
FILL_j1	jmp	(FILL_vu)

FILL_r1
	lda	FILL_lv,x
	sbc	FILL_rv,x	+
	tay
	mva	(FILL_ip),y	INTP_iz
	mva:tay	(FILL_fp),y	INTP_fz
	lda:tay	(FILL_cp),y
	lda	FILL_rv,x
FILL_j2	jmp	(FILL_vv)

FILL_r2
FILL_loadBank0	mva	#0	^31
	lda	FILL_lx,x
	add	FILL_sl,x
FILL_db	equ	*-2
	tax
	lda	#$f
FILL_ly	ldy	FILL_yv
FILL_j3	jmp	FILL_pr

** LINE
LINE	stx	LINE_p1
	sty	LINE_p2
	lda	CAPO_y,y
	sub	CAPO_y,x
	bcc	lineup
	tay
	adc	>INTP_it-$200	+
	sta	launa+2
	sta	launf+2
	mva	INTP_ch,y	launc+2
	mva	LINE_pl,y	launj+1
	mva	LINE_rh,y	launj+2
	ldy	LINE_p2
	lda	CAPO_y,y
	cmp	FILL_dy
	scc:sta	FILL_dy
	mva	CAPO_y,x	launx+1
	cmp	FILL_uy
	bcs	lsk1
	sta:sec	FILL_uy
lsk1	lda	CAPO_x,x
	sbc	CAPO_x,y	+
	tax
	lda	CAPO_x,y
	jsr	launs
	tya:eor	#$40
	sta	launx+1
	ldx	LINE_p1
	ldy	LINE_p2
	lda	CAPO_u,x
	sub	CAPO_u,y
	tax
	lda	CAPO_u,y
	jsr	launs
	tya:eor	#$c0
	sta	launx+1
	ldx	LINE_p1
	ldy	LINE_p2
	lda	CAPO_v,x
	sub	CAPO_v,y
	tax
	lda	CAPO_v,y
	jmp	launs
lineup	eor	#$ff
	tay
	adc	>INTP_it	-
	sta	launa+2
	sta	launf+2
	mva	INTP_ch+1,y	launc+2
	mva	LINE_pl+1,y	launj+1
	mva	LINE_lh+1,y	launj+2
	ldx	LINE_p2
	ldy	LINE_p1
	mva	CAPO_y,x	launx+1
	lda	CAPO_x,x
	sub	CAPO_x,y
	tax
	lda	CAPO_x,y
	jsr	launs
	tya:eor	#$40
	sta	launx+1
	ldx	LINE_p2
	ldy	LINE_p1
	lda	CAPO_u,x
	sub	CAPO_u,y
	tax
	lda	CAPO_u,y
	jsr	launs
	tya:eor	#$c0
	sta	launx+1
	ldx	LINE_p2
	ldy	LINE_p1
	lda	CAPO_v,x
	sub	CAPO_v,y
	tax
	lda	CAPO_v,y
; x = delta[xuv]
launs
launa	mvy	INTP_it,x	INTP_iz
launf	mvy	INTP_ft,x	INTP_fz
launc	ldx	INTP_c0,y
launx	ldy	#0
launj	jmp	$4c4c

plapla	pla:pla
	rts

** DRAW
DRAW
	ldx	#0
ptsl	equ	*-1
	ldy	#0
ptsh	equ	*-1
	bne	draw0	!
drawl	jsr	LINE
	ldx	LINE_p2
draw1
DRAW_loadBank2	mva	#0	^31
	inw	drawy+1
drawy	ldy	a:0
	bne	drawl
	ldy	LINE_p0
	jsr	LINE
DRAW_loadBank0	mva	#0	^31
	ldx	FILL_dy
	jsr	FILL
:!!TEST_lim dec	c
:!!TEST_lim beq	*
	ldx	drawy+1
	ldy	drawy+2
	inx
	sne:iny
draw0	stx	drawx+1
	sty	drawx+2
	stx	drawy+1
	sty	drawy+2
	mva	#63	FILL_uy
	mva	#0	FILL_dy
drawx	mvx	a:0	LINE_p0
	bne	draw1
	rts

	ift	TEST_lim
c	dta	TEST_lim
	eif

** OBJ
OBJ_init
	ldx	<object1
	ldy	>object1

OBJ_next
	stx	si
	sty	si+1
	mva	(si),0+	OBJ_bak
	mva	(si),y+	OBJ_cnt
	mva	(si),y+	OBJ_ptr
	mva	(si),y+	OBJ_ptr+1
	mva:tax	(si),y	CAPO_n
	lda	#5
	add:sta	si
	scc:inc	si+1
	txa
	asl	@
	add	CAPO_n
	sta	di
	cpx	#86
	lda	#0
	rol	@
	sta	di+1
	lda	di
	asl	@
	rol	di+1
	adc	si
	sta	ptsl
	lda	di+1
	adc	si+1
	sta	ptsh

	ldx	#1
	clc
mopo	mva	(si),0+	CAPO_a,x
	mva	(si),y+	CAPO_b,x
	mva	(si),y+	CAPO_c,x
	mva	(si),y+	CAPO_d,x
	mva	(si),y+	CAPO_e,x
	mva	(si),y	CAPO_f,x
	lda	#6
	adc:sta	si	-
	scc:inc	si+1
	cpx	CAPO_n
	inx
	bcc	mopo
	rts

COPY_moveTunnel
COPY_MOVE_LINES	equ	2
	ldx	#COPY_MOVE_LINES*16-1
COPY_move1
	lda:pha	lo2,x
	lda:pha	hi2,x
	dex
	bpl	COPY_move1
	ldx	#COPY_MOVE_LINES*16
COPY_move2
	mva	lo2,x	lo2-COPY_MOVE_LINES*16,x
	mva	hi2,x	hi2-COPY_MOVE_LINES*16,x
	inx
	bne	COPY_move2
	ldx	#-COPY_MOVE_LINES*16
COPY_move3
	pla:sta	hi2,x
	pla:sta	lo2,x
	inx
	bne	COPY_move3
COPY_tunnel
	ldx	#119
COPY_tunnel_1
	mva	zscr,x	SCR_scr,y
	mva	zscr+3*40,x	SCR_scr+$100,y
	mva	zscr+6*40,x	SCR_scr+$200,y
	mva	zscr+9*40,x	SCR_scr+$300,y
	mva	zscr+12*40,x	SCR_scr+$400,y
	mva	zscr+15*40,x	SCR_scr+$500,y
	mva	zscr+18*40,x	SCR_scr+$600,y
	mva	zscr+21*40,x	SCR_scr+$700,y
	mva	zscr+24*40,x	SCR_scr+$800,y
	mva	zscr+27*40,x	SCR_scr+$900,y
	mva	zscr+30*40,x	SCR_scr+$a00,y
	mva	zscr+33*40,x	SCR_scr+$b00,y
	mva	zscr+36*40,x	SCR_scr+$c00,y
	mva	zscr+39*40,x	SCR_scr+$d00,y
	mva	zscr+42*40,x	SCR_scr+$e00,y
	mva	zscr+45*40,x	SCR_scr+$f00,y
	mva	zscr+48*40,x	SCR_scr+$1000,y
	mva	zscr+51*40,x	SCR_scr+$1100,y
	mva	zscr+54*40,x	SCR_scr+$1200,y
	dey
	dex
	bpl	COPY_tunnel_1
	rts

*** Data
	ift	!NUMEN
Banks_forEffect
	dta	0,0,$fe,$ee,$ea,$e6
	eif

object1
	ift	1
	dta	$40,40,a(object2)
	ins	'torus.3d1'
;	icl	'14scian.asx'
	els
	dta	$80,255,a(object1)
	dta	3
	dta	$10,$10,$20,$10,$10,$20
	dta	$30,$30,$20,$30,$30,$20
	dta	$10,$30,$20,$10,$30,$20
	dta	1,2,3,0,0
	eif
object2
	dta	$a0,255,a(object2)
	ins	'triangle.3d1'
;object3
;	dta	$90,40,a(object1)
;	ins	'hammer.3d1'

* DL
	org	$fe30
	ert	[DL_1^DL_e]&$fc00
	ert	SCR_lines!=56
DL_1	dta	$f0
	dta	$6f,a(SCR_scr),$8f,$2f
	dta	$cf,a(SCR_scr+$100),$2f,$8f
	dta	$6f,a(SCR_scr+$200),$8f,$2f
	dta	$cf,a(SCR_scr+$300),$2f,$8f
	dta	$6f,a(SCR_scr+$400),$8f,$2f
	dta	$cf,a(SCR_scr+$500),$2f,$8f
	dta	$6f,a(SCR_scr+$600),$8f,$2f
	dta	$cf,a(SCR_scr+$700),$2f,$8f
	dta	$6f,a(SCR_scr+$800),$8f,$2f
	dta	$cf,a(SCR_scr+$900),$2f,$8f
	dta	$6f,a(SCR_scr+$a00),$8f,$2f
	dta	$cf,a(SCR_scr+$b00),$2f,$8f
	dta	$6f,a(SCR_scr+$c00),$8f,$2f
	dta	$cf,a(SCR_scr+$d00),$2f,$8f
	dta	$6f,a(SCR_scr+$e00),$8f,$2f
	dta	$cf,a(SCR_scr+$f00),$2f,$8f
	dta	$6f,a(SCR_scr+$1000),$8f,$2f
	dta	$cf,a(SCR_scr+$1100),$2f,$8f
	dta	$6f,a(SCR_scr+$1200),$8f
	dta	$41,a(DL_1)
DL_2	dta	$f0
	dta	$6f,a(SCR_scr+$80),$8f,$2f
	dta	$cf,a(SCR_scr+$180),$2f,$8f
	dta	$6f,a(SCR_scr+$280),$8f,$2f
	dta	$cf,a(SCR_scr+$380),$2f,$8f
	dta	$6f,a(SCR_scr+$480),$8f,$2f
	dta	$cf,a(SCR_scr+$580),$2f,$8f
	dta	$6f,a(SCR_scr+$680),$8f,$2f
	dta	$cf,a(SCR_scr+$780),$2f,$8f
	dta	$6f,a(SCR_scr+$880),$8f,$2f
	dta	$cf,a(SCR_scr+$980),$2f,$8f
	dta	$6f,a(SCR_scr+$a80),$8f,$2f
	dta	$cf,a(SCR_scr+$b80),$2f,$8f
	dta	$6f,a(SCR_scr+$c80),$8f,$2f
	dta	$cf,a(SCR_scr+$d80),$2f,$8f
	dta	$6f,a(SCR_scr+$e80),$8f,$2f
	dta	$cf,a(SCR_scr+$f80),$2f,$8f
	dta	$6f,a(SCR_scr+$1080),$8f,$2f
	dta	$cf,a(SCR_scr+$1180),$2f,$8f
	dta	$6f,a(SCR_scr+$1280),$8f
	dta	$41,a(DL_2)
DL_e equ *-1

	end